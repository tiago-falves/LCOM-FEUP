#include <lcom/lcf.h>
#include <stdint.h>
#include "drawing.h"
#include "math.h"

static char *video_mem;		/* Process (virtual) address to which VRAM is mapped */

static unsigned h_res;	        /* Horizontal resolution in pixels */
static unsigned v_res;	        /* Vertical resolution in pixels */
static int bytes_per_pixel; /* Number of VRAM bits per pixel */


int (graphic_mode_init)(uint16_t mode){
  vbe_mode_info_t mode_info;

  if(vbe_get_mode_info(mode, &mode_info)){
    printf("Error reading vbe mode info.");
    return 1;
  }                  

  int r;
  struct minix_mem_range mr;
  unsigned int vram_base;
  unsigned int vram_size;
  bytes_per_pixel = ceil(mode_info.BitsPerPixel / (double)8);
  h_res = mode_info.XResolution;
  v_res = mode_info.YResolution;


  vram_base = mode_info.PhysBasePtr;
  vram_size = bytes_per_pixel * mode_info.XResolution * mode_info.YResolution;

  mr.mr_base = (phys_bytes) vram_base;
  mr.mr_limit = mr.mr_base + vram_size;

  if( OK != (r = sys_privctl(SELF, SYS_PRIV_ADD_MEM, &mr)))
   panic("sys_privctl (ADD_MEM) failed: %d\n", r);

  /* Map memory */

  video_mem = vm_map_phys(SELF, (void *)mr.mr_base, vram_size);

  if(video_mem == MAP_FAILED)
    panic("couldn't map video memory");

  struct reg86 rg;

  memset(&rg, 0, sizeof(rg));

  rg.ax = SET_GRAPHIC_MODE;
  rg.bx = LINEAR_MODE_MASK | mode;
  rg.intno = 0x10;

  if(sys_int86(&rg) != OK){
    printf("set_vbe_mode: sys_int86() failed \n");
    return 1;
  }

  return 0;
}

int (vg_draw_hline)(uint16_t x, uint16_t y, uint16_t len, uint32_t color){

  for(int i = 0; i < len; i++){
    vg_draw_pixel(x + i, y, color);
  }

  return 0;
}

int (vg_draw_pixel)(uint16_t x, uint16_t y, uint32_t color){

  if ((x >= h_res || y >= v_res) && (x < 0 || y < 0)) {
    return 1;
  }
  
  char * pixel_init = ((char *)video_mem + (y*h_res + x)*bytes_per_pixel);

  for(int i = 0; i < bytes_per_pixel; i++ ){
    *pixel_init = color;  
     pixel_init++;
     color = color >> 8;
    
  }
  
  return 0;
}

int (vg_draw_rectangle)(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color){

  for(int i = 0; i <height; i++){
    vg_draw_hline(x, y + i, width, color);
  }

  return 0;
}
