#include "i8042.h"
#include "mouse.h"
#include <stdint.h>
#include "pointer.xpm"

uint8_t status_code, packet_byte;
int x_sum = 0,y_sum = 0, y_max_value;
static int hook_id = 2;
bool read_mouse = true;
enum mouse_states {initial, ascending, vertix, descending} state = initial;


void (mouse_ih)(){

  //Checks if it has any parity or time out error
  if ((status_code & PARITY_BIT) >> 7 | (status_code & TIME_OUT_BIT) >> 6 | !(status_code & AUX_BIT >> 5))
  {

    //if it has, it should discard de byte
    u_int8_t disposable_byte;

    if(util_sys_inb(OUT_BUF_REG, &disposable_byte)){
      printf("Error reading disposable byte.\n");

    }

    read_mouse=false;

    printf("Parity, Timeout Error or Keyboard.\n");
  }
  else{

    read_mouse=true;
    if(util_sys_inb(OUT_BUF_REG, &packet_byte)){
      printf("Error reading scan code.\n");
    }
  }

}

 int mouse_subscribe(uint8_t *bit_no){

   *bit_no = hook_id; 

    if(sys_irqsetpolicy(MOUSE_IRQ ,IRQ_REENABLE |IRQ_EXCLUSIVE, &hook_id)){
      printf("Error subscribing notification.\n");
      return 1;
    }

  return 0;
 }

  int mouse_unsubscribe(){

    if(sys_irqrmpolicy(&hook_id)){
      printf("Error unsubscribing notification.\n");
      return 1;
    }

  return 0;
  }


   void packet_byte_handler(int *position, uint8_t bytes[3]){

    //If it is the first byte and it doens't have bit 3 set to 1 then it can't be in position 0
    if ((*position) == 0 && !(packet_byte & BIT(3))){
      return;
    }

    //Else just save the packet byte into the bytes and add 1 to the positon               
    bytes[(*position)] = packet_byte;
    (*position)+=1;
          
  }
 
  void packet_handler(struct packet *pp, uint8_t packet[3]){
    //Save the packet bytes
    pp->bytes[0] = packet[0];
    pp->bytes[1] = packet[1];
    pp->bytes[2] = packet[2];

    //Save Overflow Values
    pp->x_ov = (packet[0] & BIT(6)) >> 6;
    pp->y_ov = (packet[0] & BIT(7)) >> 7;

    //Save Mouse Button Click
    pp->lb = packet[0] & BIT(0);
    pp->rb = (packet[0] & BIT(1)) >> 1;
    pp->mb = (packet[0] & BIT(2)) >> 2;

    //Save Mouse Movement on the X axis
    if(packet[0] & MSB_X_DELTA_BIT){
      pp->delta_x = (packet[1] | EXTEND_8_TO_16);
    }else{
      pp->delta_x = packet[1];
    }

    //Save Mouse Movement on the Y axis
    if(packet[0] & MSB_Y_DELTA_BIT){
      pp->delta_y = (packet[2] | EXTEND_8_TO_16);
    }else{
      pp->delta_y = packet[2];
    }

  }

  int mouse_send_command(uint8_t command){
    uint8_t ack_byte;

    while(true){

      if(check_if_IBF_full()){
        continue;
      }
      
      //Send the Write Command
      sys_outb(KBC_COMMAND_REG, WRITE_BYTE_TO_MOUSE);

      if(check_if_IBF_full()){
        continue;
      }

      //Sends the Command Argument
      sys_outb(INPUT_BUF_REG, command);

      //Checks the ACK byte
      util_sys_inb(OUT_BUF_REG,&ack_byte);
      if (ack_byte != ACK)
      {
        continue;
      }
      return 0;
    }
    return 1;
}


void mouse_enable_interrupts(){
  sys_irqenable(&hook_id);

}
void mouse_disable_interrupts(){
  sys_irqdisable(&hook_id);
}

int mouse_flush_OBF(){

  uint8_t byte_To_flush;

    //Reads the status code
    if(util_sys_inb(STAT_REG, &status_code)){
      printf("Error reading status code."); 
      return 1;                 
    }
    
   //Checks if the OBF is full and if it is, cleans it
   if(status_code & OBF_BIT) {

     if(util_sys_inb(OUT_BUF_REG, &byte_To_flush)){
      printf("Error reading scan code.");
      return 1;
    }

  } 
   return 0;
}


  int reset_KBC_command_byte(uint8_t byte){

    while(true){

      if(check_if_IBF_full()){
        continue;
      }
      
      //Send the Command
      sys_outb(KBC_COMMAND_REG, WRITE_COMMAND_BYTE);

      if(check_if_IBF_full()){
        continue;
      }

      //Sends the Command Byte
      sys_outb(INPUT_BUF_REG, byte);     
      return 0;
    }
    return 1;
}

int check_if_IBF_full(){
  
  uint8_t status;

  util_sys_inb(STAT_REG, &status);

  //The IBF is full if the IBF_BIT is set to 1 in the status
  if(status & IBF_BIT){
    return 1;
  }

  return 0;
}


 void mouse_packet_analyser(struct packet pp, Terminix * terminix){

   terminix->mouse->x += pp.delta_x;
   terminix->mouse->y p= pp.delta_y;
   
   
 }

  void mouse_handler(int position, uint8_t packet[3]){
   Terminix *terminix;
   terminix = get_current_terminix();

   mouse_ih();

  if (read_mouse){
    //Saves the new byte into the packet 
    packet_byte_handler(&position, packet);

    //Checking wether we have full scan code or not
    //If its full it should print the number
    if (position == 3) {
                        
    position = 0; //Reset position for the next packet

    struct packet pp; 

    packet_handler(&pp,packet); //Save the information into the struct packet

    mouse_print_packet(&pp);

    mouse_actions_analyser(&finished_inverted_V,pp,x_len,tolerance); //Analyses the movement of the mouse
  }
}


Mouse * creat_mouse(){
  Mouse * mouse_ptr = malloc(sizeof(Mouse));

  xpm_image_t  mouse_img;



  convert_xpm_img(pointer_xpm,&mouse_img);

  mouse_ptr->x = 0;
  mouse_ptr->y = 0;
  mouse_ptr->mouse_img = mouse_img;
  

  return mouse_ptr;
}
