// IMPORTANT: you must include the following line in all your C files
#include <lcom/lcf.h>
#include <lcom/liblm.h>
#include <lcom/proj.h>
#include "i8042.h"
#include "i8254.h"
#include "drawing.h"
#include "mouse.h"
#include "lcom/vbe.h"

#include <stdbool.h>
#include <stdint.h>

extern uint32_t global_counter;
extern uint8_t status_code, scan_code;
extern bool read_mouse;



// Any header files included below this line should have been created by you

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need it]
  lcf_trace_calls("/home/lcom/labs/proj/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/proj/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}


//Fun√ßao do professor
/*static int print_usage() {
  printf("Usage: <mode - hex>\n");

  return 1;
}*/

int(proj_main_loop)(int argc, char *argv[]) {


  //video_test_rectangle(0x115,20,20,50,50, 303030);
  mouse_test_gesture(10, 5);
  return 0;


  
  //Codigo do professor, correr para ver um guaxini giro
  /* 
   * Substitute the code below by your own
   */

  //
  // if you're interested, try to extend the command line options so that the usage becomes:
  // <mode - hex> <minix3 logo  - true|false> <grayscale - true|false> <delay (secs)>
  //
  /*bool const minix3_logo = true;
  bool const grayscale = false;
  uint8_t const delay = 5;
  uint16_t mode;

  if (argc != 1)
    return print_usage();

  // parse mode info (it has some limitations for the sake of simplicity)
  if (sscanf(argv[0], "%hx", &mode) != 1) {
    printf("%s: invalid mode (%s)\n", __func__, argv[0]);

    return print_usage();
  }

  return proj_demo(mode, minix3_logo, grayscale, delay);*/
}


int(video_test_rectangle)(uint16_t mode, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color) {

  vbe_mode_info_t mode_info;

  graphic_mode_init(mode, &mode_info);

  vg_draw_rectangle(x, y, width, height, color);

  run_until_ESC_key();

  vg_exit();
  
  return 0;
}

int (mouse_test_gesture)(uint8_t x_len, uint8_t tolerance) {
  uint8_t  bit_no;
  int ipc_status, r, irq_set = 0;
  message msg;
  int position =0;
  uint8_t packet[3];
  bool finished_inverted_V = false;

  if(mouse_subscribe(&bit_no)){
    printf("Error subscribing in lab4.\n");
    return 1;
  }

  irq_set = BIT(bit_no);

  //Enable Mouse Data Reporting
  mouse_disable_interrupts();
  mouse_send_command(MOUSE_EN_DATA_REPORTING);
  mouse_enable_interrupts();
 

  while(!finished_inverted_V) { 
      if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0){ 
          printf("driver_receive failed with: %d", r);
         

          continue;

      }
      if (is_ipc_notify(ipc_status)) { // received notification
          
          switch (_ENDPOINT_P(msg.m_source)) {
              case HARDWARE: /* hardware interrupt notification */	

                  if (msg.m_notify.interrupts & irq_set) { /* subscribed interrupt */
                  
                    //Reading status code
                    if(util_sys_inb(STAT_REG, &status_code)){
                      printf("Error reading status code.");                  
                    }

                    //Checks if the OBF is full
                    if(!(status_code & OBF_BIT))
                    {
                      continue;
                    }

                    mouse_ih();

                    if (read_mouse){
                      //Saves the new byte into the packet 
                      packet_byte_handler(&position, packet);

                      //Checking wether we have full scan code or not
                      //If its full it should print the number
                      if (position == 3) {
                        
                        position = 0; //Reset position for the next packet

                        struct packet pp; 

                        packet_handler(&pp,packet); //Save the information into the struct packet

                        mouse_print_packet(&pp);

                        mouse_actions_analyser(&finished_inverted_V,pp,x_len,tolerance);
                     
                      }
                    }          
                  } 
                break;

              default:
                break; /* no other notifications expected: do nothing */	
          }
      }
  }
  //Disables Mouse Data Reporting
  mouse_disable_interrupts();
  mouse_send_command(MOUSE_DIS_DATA_REPORTING);
  mouse_enable_interrupts();

  //Unsubscribing to the Mouse
  if(mouse_unsubscribe()){
    printf("Error unsubscribing mouse in lab4.\n");
  }

  //Checks if the OBF is full and if it is, it cleans it
  mouse_flush_OBF();

  return 0;
}

